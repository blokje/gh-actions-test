# We have a certain policy on how we create branch names and where to merge them to. The policy is as
# following
#
# A branch name shuold be in the form of {token}/SCRIPTIX-{id}?/{description}
#
# Where token can be one of:
#   - feature: Task to be merged into `develop`
#   - hotfix:  Critical bug fix merged into `main`
#   - release: Merge for `develop` to `main`
#   - bug:     Issue to be fixed into `develop`
#
# Hotfixes are automatically rebased into `develop` once they are comitted to main. The same with
# releases
#
# This github action should ensure the right branch is enforced for GH actions

on:
  pull_request:
    types: [opened, edited, synchronize, reopened]
    branches:
      - "main"
      - "develop"
      - "release/**"

jobs:
  ensure-pr-target:
    runs-on: "ubuntu-latest"
    steps:
      - name: Ensure PR is assigned to correct target
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |

          PR_NUMBER=$(jq -r ".pull_request.number" "$GITHUB_EVENT_PATH")
          if [[ "$PR_NUMBER" == "null" ]]; then
            PR_NUMBER=$(jq -r ".issue.number" "$GITHUB_EVENT_PATH")
          fi
          if [[ "$PR_NUMBER" == "null" ]]; then
            echo "Failed to determine PR Number."
            exit 1
          fi
          echo "Collecting information about PR #$PR_NUMBER of $GITHUB_REPOSITORY..."

          pr_resp=$(curl -X GET -s -H "Authorization: token $GITHUB_TOKEN" \
                    -H "Accept: application/vnd.github.v3+json" \
                    "https://api.github.com/repos/$GITHUB_REPOSITORY/pulls/$PR_NUMBER")

          # Source branch
          HEAD_BRANCH=$(echo "$pr_resp" | jq -r .head.ref)

          # Destination branch
          BASE_BRANCH=$(echo "$pr_resp" | jq -r .base.ref)

          # Destination branch
          PR_TITLE=$(echo "$pr_resp" | jq -r .title)


          comment() {
            curl -s -o /dev/null -X POST  -H "Authorization: token $GITHUB_TOKEN" \
                  -H "Accept: application/vnd.github.v3+json" \
                  -d "{\"body\": \"$1\"}" \
                  https://api.github.com/repos/$GITHUB_REPOSITORY/issues/$PR_NUMBER/comments
          }

          switch_base() {
            NEW_BASE="$1"
            curl -s \
              -X PATCH \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/$GITHUB_REPOSITORY/pulls/$PR_NUMBER" \
              -d "{\"base\": \"$NEW_BASE\"}"
          }

          reject_pr() {
            comment "$@"
            NEW_TITLE=$( echo "$PR_TITLE" | sed 's/^\[REJECTED\]\s*//')
            curl -s \
              -X PATCH \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/$GITHUB_REPOSITORY/pulls/$PR_NUMBER" \
              -d "{\"title\":\"[REJECTED] $NEW_TITLE\", \"state\": \"closed\"}"
          }

          # Ensure release and hotfix are merged to
          if [[ "$HEAD_BRANCH" =~ ^(release|hotfix)\/ ]]; then
            echo "Ensure merge to main"
            if [[ "$BASE_BRANCH" != "main" ]]; then
              echo "::warning ::Trying to merge to wrong branch, $BASE_BRANCH, switching to main"
              comment "Wrong branch selected, switching to \`main\`"
              switch_base "main"
            fi
            exit 0
          fi

          # Ensure feature and bug are merged to develop
          if [[ "$HEAD_BRANCH" =~ ^(feature|bug)\/ ]]; then
            echo "Ensure merge to develop"
            if [[ "$BASE_BRANCH" != "develop" ]]; then
              echo "::warning ::Trying to merge to wrong branch, $BASE_BRANCH, switching to develop"
              comment "Wrong branch selected, switching to \`develop\`"
              switch_base "develop"
            fi
            exit 0
          fi

          if [[ "$BASE_BRANCH" == "main" ]]l; then
            echo "::error ::Direct merging to main is only permitted from release or hotfix, closing PR"
            reject_pr "Direct merge from \`$HEAD_BRANCH\` to \`main\` is not permitted! Create a \`release/\` or \`hotfix/\` branch first!'
          fi

          if [[ "$BASE_BRANCH" == "develop" ]]l; then
            echo "::error ::Direct merging to develop is only permitted from feature or bug, closing PR"
            reject_pr "Direct merge from \`$HEAD_BRANCH\` to \`develop\` is not permitted! Create a \`feature/\` or \`bug/\` branch first!'
          fi